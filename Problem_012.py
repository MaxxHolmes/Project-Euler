# Solution to Project Euler - Problem 12
# Highly Divisible Triangle Number by MaxxHolmes

# The sequence of triangle numbers is generated by adding the natural numbers.
# What is the value of the first triangle number to have over five hundred divisors?
#_____________________________________________________________________

import time
import math

# Could definitely optimise this better

start = time.time()

# We only need to search for divisors up to the square root of the input number
# Every other factor will have a corresponding factor, so we add 2 to the total for
# each divisor found, and then mark the square root as a special case if interger.

def find_divisors(n):
	total_divisors = sum(2 for i in range(1, round(math.sqrt(n) + 1)) if n % i == 0)
	if (round(math.sqrt(n))**2 == n):
		total_divisors -= 1
	return total_divisors

# Simply use a loop which goes on until the 500 divisor condition is met.

def solution():
	triangle_num = 1
	i = 1
	while True:
		i += 1
		triangle_num += i
		if find_divisors(triangle_num) > 500:
			return triangle_num

print(solution())
print(time.time() - start)
